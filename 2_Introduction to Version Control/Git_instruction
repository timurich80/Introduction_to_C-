## Инструкция по работе с Git ##
 
**git --version**
 
Выдает версию Git\
git version 2.37.1.windows.1  -    *Версия* Git
 
**git init**
 
Инициализация папки, папка становится репозиторием, добавляются скрытыефайлы в папку\
Initialized empty Git repository in C:/Users/xapic/Desktop/python/new/vsc/.git/
 
**git add**
 
git add .         -      добавить в индекс все новые, изменённые, удалённые файлы 
из текущей директории и её поддиректорий
git add text.txt  -      добавить в индекс указанный файл (был изменён, был удалён 
или это новый файл)
git add -i        -      запустить интерактивную оболочку для добавления в индекс 
только выбранных файлов
git add -p        -      показать новые/изменённые файлы по очереди с указанием 
их изменений и вопросом об отслеживании/индексировании
 
**git log**
 
Выводит журнал изменеий\
commit 2fafed44ef35fbd211279ee21b3d138e25a3f0b8 (HEAD -> master)
     -   *коммит* 2fafe... *находится в ветке мастер*  \
Author: timurich80 <timurich80@gmail.com>\
Date:   Sun Aug 7 11:27:04 2022 +0300
git log master             - показать коммиты в указанной ветке
git log -2                 - показать последние 2 коммита в активной ветке
git log -2 --stat          - показать последние 2 коммита и статистику внесенных 
ими изменений
git log -p -22             - показать последние 22 коммита и внесенную ими разницу 
на уровне строк
git log --graph -10        - показать последние 10 коммитов с ASCII-представлением 
ветвления
git log --since=2.weeks    - показать коммиты за последние 2 недели
git log --after '2018-06-30' - показать коммиты, сделанные после указанной даты
git log index.html         - показать историю изменений файла index.html (только 
коммиты)
git log -5 index.html      - показать историю изменений файла index.html, последние 
5 коммитов (только коммиты)
git log -p index.html      - показать историю изменений файла index.html (коммиты 
и изменения)
git log -G'myFunction' -p  - показать все коммиты, в которых менялись строки 
с myFunction (в кавычках регулярное выражение)
git log -L '/<head>/','/<\/head>/':index.html - показать изменения от указанного 
до указанного регулярных выражений в указанном файле
git log --grep fix         - показать коммиты, в описании которых есть буквосочетание fix 
(регистрозависимо, только коммиты текущей ветки)
git log --grep fix -i      - показать коммиты, в описании которых есть буквосочетание fix 
(регистроНЕзависимо, только коммиты текущей ветки)
git log --grep 'fix(ing|me)' -P - показать коммиты, в описании которых есть совпадения 
для регулярного выражения (только коммиты текущей ветки)
git log --pretty=format:"%h - %an, %ar : %s" -4 - показать последние 4 коммита 
с форматированием выводимых данных
git log --pretty=format:"%h %ad | %s%d [%an]" --graph --date=short - мой формат 
вывода, висящий на алиасе оболочки
git log master..branch_99  - показать коммиты из ветки branch_99, которые 
не влиты в master
git log branch_99..master  - показать коммиты из ветки master, которые не влиты 
в branch_99
git log master...branch_99 --boundary -- graph - показать коммиты из указанных 
веток, начиная с их расхождения (коммит расхождения будет показан)
 
**git status**
 
Показывает статус\
On branch master  -  *находимся в ветке master*  \
nothing to commit, working tree clean   -   *ничего не нужно фиксировать, рабочее дерево чистое*
 
**git commit -m "<коментарий>**
 
Зафиксировать статус с <комертарием>
 
**git checkot** <№ коммита (хотя бы первые 4 элемента)>
 
 git checkout b9533bb    -    переключиться на коммит с указанным хешем
(переместить HEAD на указанный коммит, рабочую директорию вернуть к состоянию, 
на момент этого коммита)
git checkout master     -    переключиться на коммит, на который указывает master
(переместить HEAD на коммит, на который указывает master, рабочую директорию вернуть 
к состоянию на момент этого коммита)
git checkout -b new-branch 5589877   - создать ветку new-branch, начинающуюся с 
коммита c хешем 5589877 (переместить HEAD на указанный коммит, рабочую директорию вернуть к состоянию, на момент этого коммита, создать указатель на этот коммит (ветку) с указанным именем)
 
**git diff**
 
git diff                 - сравнить рабочую директорию и индекс (неотслеживаемые 
файлы ИГНОРИРУЮТСЯ)
git diff --color-words   - сравнить рабочую директорию и индекс, показать отличия 
 словах (неотслеживаемые файлы ИГНОРИРУЮТСЯ)
git diff index.html      - сравнить файл из рабочей директории и индекс
git diff HEAD            - сравнить рабочую директорию и коммит, на который указывает 
HEAD (неотслеживаемые файлы ИГНОРИРУЮТСЯ)
git diff --staged        - сравнить индекс и коммит с HEAD
git diff master feature  - посмотреть что сделано в ветке feature по сравнению 
с веткой master
git diff --name-only master feature     - посмотреть что сделано в ветке feature 
по сравнению с веткой master, показать только имена файлов
git diff master...feature  - посмотреть что сделано в ветке feature с момента 
(коммита) расхождения с master
 
**git branch**
 
git branch                 - показать список веток
git branch -v              - показать список веток и последний коммит в каждой
git branch new_branch      - создать новую ветку с указанным именем на текущем коммите
git branch new_branch 5589877 - создать новую ветку с указанным именем на указанном 
коммите
git branch -f master 5589877  - переместить ветку master на указанный коммит
git branch -f master master~2 - переместить ветку master на 2 коммита назад
git checkout new_branch    - перейти в указанную ветку
git checkout -b new_branch - создать новую ветку с указанным именем и 
перейти в неё
git checkout -B master 5589877 - переместить ветку с указанным именем на 
указанный коммит и перейти в неё
git merge hotfix           - влить в ветку, в которой находимся, данные из 
ветки hotfix
git merge hotfix -m "Горячая правка" - влить в ветку, в которой находимся,
данные из ветки hotfix (указано сообщение коммита слияния)
git merge hotfix --log     - влить в ветку, в которой находимся, данные из 
ветки hotfix, показать редактор описания коммита, добавить в него сообщения 
вливаемых коммитов
git merge hotfix --no-ff   - влить в ветку, в которой находимся, данные из 
ветки hotfix, запретить простой сдвиг указателя, изменения из hotfix «останутся» 
в ней, а в активной ветке появится только коммит слияния
git branch -d hotfix       - удалить ветку hotfix (используется, если её 
изменения уже влиты в главную ветку)
git branch --merged        - показать ветки, уже слитые с активной
git branch --no-merged     - показать ветки, не слитые с активной
git branch -a              - показать все имеющиеся ветки (в т.ч. на удаленных 
репозиториях)
git branch -m old_branch_name new_branch_name - переименовать локально ветку 
old_branch_name в new_branch_name
git branch -m new_branch_name - переименовать локально ТЕКУЩУЮ ветку в 
new_branch_name
git push origin :old_branch_name new_branch_name - применить переименование в 
удаленном репозитории
git branch --unset-upstream - завершить процесс переименования 
**git brsnch <имя ветки>**



**git clone https://<адрес c github>**

копирование репозитория с github


**git remote add origin <адрес github куда заливать>\
git dranch -M main\
git push -u origin main**

оправка с локального репозитория в github

**git pull** ( pull - тянуть)

Предполагается ситуация: есть ветка master и есть ветка feature. В обеих ветках 

есть коммиты, сделанные после расхождения веток. В ветку master пытаемся влить 

ветку feature (git merge feature), получаем конфликт, т.к. в обеих ветках есть 

изменения одной и той же строки в файле index.html.
 
При возникновении конфликта, репозиторий находится в состоянии прерванного 

слияния. 
Нужно оставить в конфликтующих местах файлов только нужный код, проиндексировать 

изменения и закоммитить.
 
git merge feature                # влить в активную ветку изменения из ветки 

feature
git merge-base master feature    # показать хеш последнего общего коммита для 

двух указанных веток git checkout --ours index.html   # оставить в конфликтном файле (index.html) 

состояние ветки, В КОТОРУЮ мы вливаем (в примере — из ветки master)

git checkout --theirs index.html # оставить в конфликтном файле (index.html) 

состояние ветки, ИЗ КОТОРОЙ мы вливаем (в примере — из ветки feature)

git checkout --merge index.html  # показать в конфликтном файле (index.html) 

сравнение содержимого сливаемых веток (для ручного редактирования)

git checkout --conflict=diff3  --merge index.html # показать в конфликтном файле 

(index.html) сравнение содержимого сливаемых веток плюс то, что было в месте 

конфликта в коммите, на котором разошлись сливаемые ветки

![СКРИН](github_work.PNG)

__ПРАКТИКА__

\
\
+ Создание удаленного репозитория на Github

1. Создать учетную запись на Github

2. Нажать кнопку [New], в открывшемся окне ввести название в [Repository name], выбрать необходимые параметры исоздать новый репозиторий
![Страница Github](github_Create_a_new_repository)

3. Войти в репозиторий, нажать кнопку [Code]? скопировать адрес ссылки на 

репозиторий

4. войти в VSC, перейти в терминал, ввести команды

**git remote add origin** <адрес github куда заливать>\
**git dranch -M main\
git push -u origin main**

\
\
+ Работа в Github ForK

ForK (_англ_. вилка)   -   копирует чужой реозиторий на мой аккаунт (ответвление)

1. git clone <ссылка н адрес чужого репозитория с Github>    -    копирование чужого репозитория

2. cd <название папки>    -    смена директории (папки) на компьютере

3. git branch <имя ветки>    -    создание новой ветки

4. git chrckout <имя ветки>    -    переход на ветку




\
\

+ Работа в VSC: функция _merge_

1. Закомитить изменения на ветке и на master

2. Перейти в ветку master

3. git merge <имя ветки>

4. разрешить компромис в тексте файла

5. Ctrl + S     -     сохранить изменения в файле

6. git commit -m <коментарий>

+ Сохранение на удаленный репозиторий Github

1. сохранить и закоммитить все изменения, во всех ветках

2. git push     -     позволяет отправлять локальную ветку на удаленный 

репозиторий. Она помогает разработчикам синхронизироваться в команде, а именно 

отправляет проделанные изменения. Если программист работает один, то пуш 

позволяет хранить код в облаке, например github, gitlab и не только, избавляя от 

риска потери данных на компьютере.



